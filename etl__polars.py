# -*- coding: utf-8 -*-
"""ETL _Polars.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1njn-9RmQRud6Sj14i1LucFroohw-T8fL

# PROCESO ETL Y EDA CON LIBRERIA POLARS

![texto del vínculo](https://media.licdn.com/dms/image/D5622AQHdVbfs8-qHHg/feedshare-shrink_800/0/1695092613884?e=2147483647&v=beta&t=hHe0_sTi6ahfQztoOSiDiV_10hfOwnz8u5ZdimwDho8)

[Enlace Documentacion Libreria Polars](https://docs.pola.rs/)

## **Importacion de Librerias y Recursos**
"""

## Librerias y Recursos
!pip install fastexcel -q
!pip install xlsxwriter -q
import polars as pl
import pandas as pd
from polars import Config
from polars import DataFrame
import matplotlib.pyplot as plt
import seaborn as sns

Config.set_fmt_str_lengths(50)

# Conexion a Google Drive con los Dataframe
from google.colab import drive
drive.mount('/content/drive')

"""# **Lectura del Dataset, seleccion de Atributos y Proceso ETL**"""

# Importar BaseTickets.csv y renombrar columna 'Numero Ticket' por 'TicketID'
df = pl.read_csv(source='/content/drive/MyDrive/BaseTickets.csv', separator=';').rename({'Numero Ticket': 'TicketID'})

# Filtrar solo TicketID que empiezan con WO con funcion "filter"
df = df.filter(pl.col("TicketID").str.starts_with("WO"))

# Seleccionar columnas a usar con funcion "select" y asignar tipos de datos con funcion "cast"
df = df.select('TicketID', 'Item', 'Ubicacion', 'Service Desk', 'Estado', pl.col('Fecha Creacion').cast(pl.Date),
               pl.col('Fecha Cierre').cast(pl.Date))

# Ordenar por columnas "sort" y eliminar duplicados a partir de la columna TicketID con "unique(subset="
df = df.sort(['TicketID', 'Fecha Creacion']).unique(subset=['TicketID'], keep='last', maintain_order=True)

# Division de la Columna Ubicacion y renombrado de columnas creadas
Tickets = df.with_columns([
    pl.col("Ubicacion")
    .str.split_exact(" - ", 1)
    .struct.rename_fields(["Agencia", "AgenciaID"])
    .alias("fields"),
]).unnest('fields')

Tickets.head(5)

# Lectura del DataFrame Atenciones seleccion de columnas y transformacion tipo de datos
Atenciones = (
    pl.read_excel(source="/content/drive/MyDrive/BaseAtenciones.xlsx", sheet_name="Hoja1")
    .select(
        pl.col('Numero Ticket').alias("TicketID"),
        pl.col('Tipo de ticket')
            .str.strip_chars()
            .str.to_titlecase()
            .alias('Tipo Ticket'),
        pl.col('Proveedor')
            .fill_null('OTROS')
            .str.to_uppercase(),
        pl.col('Costo Atencion')
            .str.replace(',', '.')
            .str.replace_many(['SIN COSTO', 'COSTO CERO'], "0")
            .cast(pl.Float64)
            .alias('Costo')))

Atenciones.head(7)

"""# **Consolidacion de DataFrames**"""

consolidado = Tickets.join(Atenciones, on='TicketID').select('TicketID', 'AgenciaID','Agencia','Item','Service Desk','Estado',
                                                      'Fecha Creacion','Fecha Cierre','Tipo Ticket','Proveedor','Costo')

consolidado.head(5)

# Información para emular la funcionalidad de info() de Pandas
print(f"<class 'polars.DataFrame'>\nRangeIndex: {consolidado.height} entries\nData columns (total {len(consolidado.columns)} columns):\n"
      f"{' #':<5} {'Column':<20} {'Nulls':<10} {'Dtype'}\n" + "-" * 50 + "\n" +
      "\n".join([f"{i:<5} {col:<20} {consolidado.select(pl.col(col).null_count()).to_numpy()[0][0]:<10} {consolidado.schema[col]}"
      for i, col in enumerate(consolidado.columns)]) +
      f"\ndtypes: {consolidado.dtypes}")

"""# **Analisis EDA del DataFrame Consolidado**"""

# Estadísticas descriptivas para la columna Costo
costo_stats = consolidado.select([
    pl.col("Costo").mean().alias("Mean"),
    pl.col("Costo").median().alias("Median"),
    pl.col("Costo").min().alias("Min"),
    pl.col("Costo").max().alias("Max"),
    pl.col("Costo").null_count().alias("Null Count"),
    pl.col("Costo").count().alias("Count")
])

print(costo_stats)

# GRAFICO CON TOTAL DE TICKECTS POR TIPO

# Rellenar valores nulos en "Tipo Ticket" con "Desconocido"
consolidado = consolidado.with_columns(
    pl.col('Tipo Ticket').fill_null('Desconocido'))

# Contar tickets por Tipo Ticket
tipo_count = consolidado.select(
    pl.col('Tipo Ticket').value_counts())

# Desempaquetar el struct 'Tipo Ticket' en sus subcampos
tipo_count = tipo_count.select([
    pl.col('Tipo Ticket').struct.field('Tipo Ticket').alias('Tipo Ticket'),
    pl.col('Tipo Ticket').struct.field('count').alias('count')])

# Convertir los resultados a listas para graficar
tipos = tipo_count['Tipo Ticket'].to_list()
conteos = tipo_count['count'].to_list()

# Grafico del conteo de tickets por Tipo Ticket
plt.figure(figsize=(10, 5))
plt.bar(tipos, conteos, color='skyblue')
plt.title('Total por Tipo de Ticket')
plt.xlabel('Tipo de Ticket')
plt.ylabel('Total Tickets')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# GRAFICO CON TOP 10 (CANTIDAD DE TICKECTS POR PROVEEDOR)

# Contar tickets por Proveedor
proveedor_count = consolidado.select(
    pl.col('Proveedor').value_counts())

# Desempaquetar la estructura 'Proveedor' en sus subcampos
proveedor_count = proveedor_count.select([
    pl.col('Proveedor').struct.field('Proveedor').alias('Proveedor'),
    pl.col('Proveedor').struct.field('count').alias('count')])

# Filtrar los top 10 proveedores y mantener el orden descendente
top_proveedores = proveedor_count.sort('count', descending=True).head(10)

# Conversion a listas para graficar
proveedores = top_proveedores['Proveedor'].to_list()
conteos = top_proveedores['count'].to_list()

# Grafico Top 10 Proveedores con más Tickets en orden descendente
plt.figure(figsize=(11, 5))
plt.barh(proveedores, conteos, color='blue')
plt.title('Top 10 Proveedores con Más Tickets')
plt.xlabel('Total Tickets')
plt.gca().invert_yaxis()  # Invertir el eje Y para que el mayor esté arriba
plt.tight_layout()
plt.show()

# ANALISIS HISTORICO DE TICKECTS POR MES

# Convertir el DataFrame de Polars a pandas
consolidado_pd = consolidado.to_pandas()

# Conversion de Columna 'Fecha Creacion' a Pandas
consolidado_pd['Fecha Creacion'] = pd.to_datetime(consolidado_pd['Fecha Creacion'])

# Conteo de tickets por mes
tickets_por_mes = (consolidado_pd
                   .set_index('Fecha Creacion')
                   .resample('M')
                   .size()
                   .reset_index(name='Total de Tickets'))

# Grafico de lineas de tickects por mes
plt.figure(figsize=(10, 4))
plt.plot(tickets_por_mes['Fecha Creacion'], tickets_por_mes['Total de Tickets'], marker='o', color='green')
plt.title('Tickets por Mes')
plt.xlabel('Mes')
plt.ylabel('Total de Tickets')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# ANALISIS DE LA TASA DE CIERRE DE TICKECTS

# Considerando a 'consolidado' como DataFrame de Polars
total_tickets = consolidado.shape[0]
tickets_cerrados = consolidado.filter(pl.col('Fecha Cierre').is_not_null()).shape[0]

# Calcular la Tasa de Cierre
tasa_cierre = tickets_cerrados / total_tickets

print(f'Tasa de Cierre de Tickets: {tasa_cierre:.2%}')

# Crea un gráfico de torta para la tasa de cierre
labels = ['Tickets Cerrados', 'Tickets Abiertos']
sizes = [tickets_cerrados, total_tickets - tickets_cerrados]
colors = ['green', 'red']
explode = (0.1, 0)  # resaltar el primer segmento

plt.pie(sizes, explode=explode, labels=labels, colors=colors, autopct='%1.1f%%', shadow=True, startangle=140)
plt.title(f'Tasa de Cierre de Tickets: {tasa_cierre:.2%}')
plt.axis('equal')  # asegurar que el gráfico sea un círculo
plt.show()

# Nube de Palabras de Proveedores mas Representativos
from wordcloud import WordCloud
import matplotlib.pyplot as plt

# Obtén una lista de todos los proveedores
proveedores = consolidado['Proveedor'].to_list()

# Crea una cadena de texto que contenga todos los proveedores, separados por espacios
texto_proveedores = ' '.join(proveedores)

# Genera la nube de palabras
wordcloud = WordCloud(width=800, height=400, background_color='white').generate(texto_proveedores)

# Muestra la nube de palabras
plt.figure(figsize=(10, 5))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Proveedores mas Representativos')
plt.show()

"""# **Almacenamiento del Nuevo Dataframe**"""

# Almacenamiento del consolidado excel en el presente entorno de trabajo
consolidado.write_excel(workbook='/content/Consolidado.xlsx',
                        worksheet='Atenciones',
                        table_style="Table Style Medium 2",
                        dtype_formats={pl.Date: "mm/dd/yyyy"},
                        float_precision=2,
                        autofit=True)